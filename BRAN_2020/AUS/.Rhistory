time_origin <- mydata$var$time$units
time_origin2 <- stringr::str_sub(time_origin, 15, 24)
time_origin3 <- stringr::str_sub(time_origin, 26, 33)
time_origin <- paste(time_origin2, " ", time_origin3)
time_origin
# Merge total and Data Frames with time and remove NA values
total_data <- merge(total_data ,long_time_df ,by=c("Particle","DayofLife"))
head(total_data)
#total_data <- na.omit(total_data)
#Get the global attributes. The attributes can be listed, buy simply typing an attribute name at the command line. varid = 0 is the global file reference. Not really sure why it's needed but was in the tutorial
NCProperties <- ncatt_get(mydata,0,"_NCProperties")
feature_type <- ncatt_get(mydata,0,"feature_type")
ncei_template_version <- ncatt_get(mydata,0,"ncei_template_version")
parcels_mesh <- ncatt_get(mydata,0,"parcels_mesh")
Conventions <- ncatt_get(mydata,0,"Conventions")
#Close NetCDF file - saves data from being lost
nc_close(mydata)
# convert time from seconds since origin. Orgin is specified in the units for time. This probably needs to be automated as the origin may change next time.
total_data$Time <- as.POSIXct(total_data$time, origin = time_origin) # from info in netCDF file
total_data$Month <- lubridate::month(total_data$Time) #, label = TRUE
total_data$Year <- lubridate::year(total_data$Time)
head(total_data)
# Now sort data by particle and day of life columns
total_data <- total_data[with(total_data, order(Particle, DayofLife)), ]
is.na(total_data$Temperature) <- total_data$Temperature == 0 # change 0 to NA
total_data$Temperature <- na.locf(total_data$Temperature, na.rm=FALSE) # replace NA with last non-NA observation carried forward
# Calculate cumlative temperature (degree days) for each particle
#total_data <- total_data %>% group_by(Particle) %>% mutate(degree_days = cumsum(Temperature))
#head(total_data)
total_data$Grid <- as.factor(total_data$Grid)
total_data <- subset(total_data, degree_days <=530)
str(total_data)
single <- subset(total_data, Particle =="Particle 12")
#single <- subset(total_data, Particle =="2003_Lat-30.0_For.214756")
bounds <- read.csv("ROMS Boundaries.csv", header = T)
#dots <- read.csv("forward_release_summary _table.csv", header = T)
#Load map data
Aus <- readOGR(dsn = "C:/Users/htsch/Documents/GitHub/Wind-and-Fisheries/Shape files/australia",layer = "cstauscd_r")
#plot(Aus)
Aus_coast <- subset(Aus, FEAT_CODE != "sea")
#plot(Aus_coast)
min_lon <- 145
max_lon <- 160
min_lat <- -40
max_lat <- -19
geo_bounds <- c(left = min_lon, bottom = min_lat, right = max_lon, top = max_lat)
Sites.grid <- expand.grid(lon_bound = c(geo_bounds[1], geo_bounds[3]),
lat_bound = c(geo_bounds[2], geo_bounds[4]))
coordinates(Sites.grid) <- ~ lon_bound + lat_bound
Aus_crop <- crop(Aus_coast, extent(Sites.grid)) #rgeos must be installed to run
shelf <- read.csv("Hayden_200m_contour.csv", header = T)
#shelf <- subset(shelf, Var2 >= -39)
#shelf <- subset(shelf, Var2 <= -25.4)
#shelf <- subset(shelf, Var1 > 145)
g <- ggplot(total_data) + geom_polygon(data = Aus_crop, aes(x=long, y = lat, group = group), fill = "grey60")  +
geom_path(data = single, aes(x = Longtitude, y = Latitude, colour = Temperature),  size = 1) + theme_classic() +
coord_map("mercator") + scale_color_gradient(low="blue", high = "red")
g
p1 <- ggplot(total_data) +   geom_path(aes(x = Longtitude, y = Latitude, colour = Temperature, group = Particle),  size = 1) +
theme_classic() +
labs(x=expression(paste("Longitude (",degree, ")", sep="")), y=expression(paste("Latitude (", degree, ")"))) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
#scale_fill_distiller(palette = "Spectral", na.value=NA, trans="log10") +
coord_map() + #coord_quickmap() + #  # this line could be very slow
geom_path(data=bounds, aes(x=Long, y = Lat), colour = "black", lty="dashed", show.legend = FALSE) +
geom_polygon(data = Aus_crop, aes(x=long, y = lat, group = group), fill = "gray40", colour = "black")+
#geom_point(data = dots, aes(x = Longitude, y = Latitude), size = 2, col = "black")+
#geom_path(data=shelf, aes(x=Var1, y = Var2)) +
scale_color_gradient(low="blue", high = "red")+
theme(axis.title.x = element_text(face="bold", colour="black", size = 18),
axis.text.x  = element_text(colour="black", size = 12),
axis.title.y = element_text(face="bold", colour="black", size = 18),
axis.text.y  = element_text(colour="black", size = 14),
axis.ticks = element_line(colour="black"),
strip.text = element_text(colour="black", face = "bold", size = 14),
strip.background = element_rect(colour = "white"),
legend.justification=c(1,0), legend.position="right",
panel.border = element_rect(colour = "black", fill=NA, size = 1),
legend.key.size = unit(1, "cm"),
legend.title = element_text(face = "bold", size = 14),
legend.text = element_text(size = 12, face = "bold"))
p1
p1 <- ggplot(total_data) +   geom_path(aes(x = Longtitude, y = Latitude, colour = Temperature, group = Particle),  size = 1) +
theme_classic() +
labs(x=expression(paste("Longitude (",degree, ")", sep="")), y=expression(paste("Latitude (", degree, ")"))) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
#scale_fill_distiller(palette = "Spectral", na.value=NA, trans="log10") +
coord_map() + #coord_quickmap() + #  # this line could be very slow
#geom_path(data=bounds, aes(x=Long, y = Lat), colour = "black", lty="dashed", show.legend = FALSE) +
geom_polygon(data = Aus_crop, aes(x=long, y = lat, group = group), fill = "gray40", colour = "black")+
#geom_point(data = dots, aes(x = Longitude, y = Latitude), size = 2, col = "black")+
#geom_path(data=shelf, aes(x=Var1, y = Var2)) +
scale_color_gradient(low="blue", high = "red")+
theme(axis.title.x = element_text(face="bold", colour="black", size = 18),
axis.text.x  = element_text(colour="black", size = 12),
axis.title.y = element_text(face="bold", colour="black", size = 18),
axis.text.y  = element_text(colour="black", size = 14),
axis.ticks = element_line(colour="black"),
strip.text = element_text(colour="black", face = "bold", size = 14),
strip.background = element_rect(colour = "white"),
legend.justification=c(1,0), legend.position="right",
panel.border = element_rect(colour = "black", fill=NA, size = 1),
legend.key.size = unit(1, "cm"),
legend.title = element_text(face = "bold", size = 14),
legend.text = element_text(size = 12, face = "bold"))
p1
Aus <- readOGR(dsn = "C:/Users/htsch/Documents/GitHub/Wind-and-Fisheries/Shape files/australia",layer = "cstauscd_r")
#plot(Aus)
Aus_coast <- subset(Aus, FEAT_CODE != "sea")
#plot(Aus_coast)
min_lon <- 145
max_lon <- 160
min_lat <- -40
max_lat <- -15
geo_bounds <- c(left = min_lon, bottom = min_lat, right = max_lon, top = max_lat)
Sites.grid <- expand.grid(lon_bound = c(geo_bounds[1], geo_bounds[3]),
lat_bound = c(geo_bounds[2], geo_bounds[4]))
coordinates(Sites.grid) <- ~ lon_bound + lat_bound
Aus_crop <- crop(Aus_coast, extent(Sites.grid)) #rgeos must be installed to run
shelf <- read.csv("Hayden_200m_contour.csv", header = T)
#shelf <- subset(shelf, Var2 >= -39)
#shelf <- subset(shelf, Var2 <= -25.4)
#shelf <- subset(shelf, Var1 > 145)
g <- ggplot(total_data) + geom_polygon(data = Aus_crop, aes(x=long, y = lat, group = group), fill = "grey60")  +
geom_path(data = single, aes(x = Longtitude, y = Latitude, colour = Temperature),  size = 1) + theme_classic() +
coord_map("mercator") + scale_color_gradient(low="blue", high = "red")
g
p1 <- ggplot(total_data) +   geom_path(aes(x = Longtitude, y = Latitude, colour = Temperature, group = Particle),  size = 1) +
theme_classic() +
labs(x=expression(paste("Longitude (",degree, ")", sep="")), y=expression(paste("Latitude (", degree, ")"))) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
#scale_fill_distiller(palette = "Spectral", na.value=NA, trans="log10") +
coord_map() + #coord_quickmap() + #  # this line could be very slow
#geom_path(data=bounds, aes(x=Long, y = Lat), colour = "black", lty="dashed", show.legend = FALSE) +
geom_polygon(data = Aus_crop, aes(x=long, y = lat, group = group), fill = "gray40", colour = "black")+
#geom_point(data = dots, aes(x = Longitude, y = Latitude), size = 2, col = "black")+
#geom_path(data=shelf, aes(x=Var1, y = Var2)) +
scale_color_gradient(low="blue", high = "red")+
theme(axis.title.x = element_text(face="bold", colour="black", size = 18),
axis.text.x  = element_text(colour="black", size = 12),
axis.title.y = element_text(face="bold", colour="black", size = 18),
axis.text.y  = element_text(colour="black", size = 14),
axis.ticks = element_line(colour="black"),
strip.text = element_text(colour="black", face = "bold", size = 14),
strip.background = element_rect(colour = "white"),
legend.justification=c(1,0), legend.position="right",
panel.border = element_rect(colour = "black", fill=NA, size = 1),
legend.key.size = unit(1, "cm"),
legend.title = element_text(face = "bold", size = 14),
legend.text = element_text(size = 12, face = "bold"))
p1
Aus <- readOGR(dsn = "C:/Users/htsch/Documents/GitHub/Wind-and-Fisheries/Shape files/australia",layer = "cstauscd_r")
#plot(Aus)
Aus_coast <- subset(Aus, FEAT_CODE != "sea")
#plot(Aus_coast)
min_lon <- 145
max_lon <- 160
min_lat <- -30
max_lat <- -15
geo_bounds <- c(left = min_lon, bottom = min_lat, right = max_lon, top = max_lat)
Sites.grid <- expand.grid(lon_bound = c(geo_bounds[1], geo_bounds[3]),
lat_bound = c(geo_bounds[2], geo_bounds[4]))
coordinates(Sites.grid) <- ~ lon_bound + lat_bound
Aus_crop <- crop(Aus_coast, extent(Sites.grid)) #rgeos must be installed to run
shelf <- read.csv("Hayden_200m_contour.csv", header = T)
#shelf <- subset(shelf, Var2 >= -39)
#shelf <- subset(shelf, Var2 <= -25.4)
#shelf <- subset(shelf, Var1 > 145)
g <- ggplot(total_data) + geom_polygon(data = Aus_crop, aes(x=long, y = lat, group = group), fill = "grey60")  +
geom_path(data = single, aes(x = Longtitude, y = Latitude, colour = Temperature),  size = 1) + theme_classic() +
coord_map("mercator") + scale_color_gradient(low="blue", high = "red")
g
p1 <- ggplot(total_data) +   geom_path(aes(x = Longtitude, y = Latitude, colour = Temperature, group = Particle),  size = 1) +
theme_classic() +
labs(x=expression(paste("Longitude (",degree, ")", sep="")), y=expression(paste("Latitude (", degree, ")"))) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
#scale_fill_distiller(palette = "Spectral", na.value=NA, trans="log10") +
coord_map() + #coord_quickmap() + #  # this line could be very slow
#geom_path(data=bounds, aes(x=Long, y = Lat), colour = "black", lty="dashed", show.legend = FALSE) +
geom_polygon(data = Aus_crop, aes(x=long, y = lat, group = group), fill = "gray40", colour = "black")+
#geom_point(data = dots, aes(x = Longitude, y = Latitude), size = 2, col = "black")+
#geom_path(data=shelf, aes(x=Var1, y = Var2)) +
scale_color_gradient(low="blue", high = "red")+
theme(axis.title.x = element_text(face="bold", colour="black", size = 18),
axis.text.x  = element_text(colour="black", size = 12),
axis.title.y = element_text(face="bold", colour="black", size = 18),
axis.text.y  = element_text(colour="black", size = 14),
axis.ticks = element_line(colour="black"),
strip.text = element_text(colour="black", face = "bold", size = 14),
strip.background = element_rect(colour = "white"),
legend.justification=c(1,0), legend.position="right",
panel.border = element_rect(colour = "black", fill=NA, size = 1),
legend.key.size = unit(1, "cm"),
legend.title = element_text(face = "bold", size = 14),
legend.text = element_text(size = 12, face = "bold"))
p1
p2 <- ggplot(single, aes(DayofLife, degree_days, col = Temperature)) + geom_line(size=2) + theme_classic() +
scale_color_gradient(low="blue", high = "red") +
theme(axis.title.x = element_text(face="bold", colour="black", size = 18),
axis.text.x  = element_text(colour="black", size = 12),
axis.title.y = element_text(face="bold", colour="black", size = 18),
axis.text.y  = element_text(colour="black", size = 14),
axis.ticks = element_line(colour="black"),
strip.text = element_text(colour="black", face = "bold", size = 14),
strip.background = element_rect(colour = "white"),
legend.justification=c(1,0), legend.position="right",
panel.border = element_rect(colour = "black", fill=NA, size = 1),
legend.key.size = unit(1, "cm"),
legend.title = element_text(face = "bold", size = 14),
legend.text = element_text(size = 12, face = "bold")) +
ylab("Degree-days") + xlab("Days")
p2
library(shinystan)
launch_shinystan_demo()
library(TropFishR)
install.packages("TropFishR")
library("TropFishR")
data(synLFQ1)
Bhattacharya(param = synLFQ1)
x2 <- Bhattacharya(param = synLFQ1)
x2 <- Bhattacharya(param = synLFQ1)
x2 <- Bhattacharya(param = synLFQ1)
x2 <- Bhattacharya(param = synLFQ1)
head(x2)
remotes::install_github("karthik/holepunch")
remotes::install_github("karthik/holepunch")
library(lubridate)
install.packages("lubridate")
install.packages("lubridate")
remotes::install_github("karthik/holepunch")
install.packages("ShapeR")
install.packages("shapeR")
library(tidync)
library(tidyverse)
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc")
View(mydata)
mydata <- tidync("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc")
mydata
mydata <- tidync("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc") %>% activate(D2)
mydata <- tidync("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc") %>% activate(grid_y_T)
mydata
mydata <- tidync("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc") %>% activate(grid_y_T) %>%hyper_tibble()
mydata <- tidync("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc") %>% hyper_tibble()
View(mydata)
mydata <- tidync("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc") %>% activate(grid_x_T, grid_y_T)
mydata
mydata <- tidync("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc") %>% activate(grid_x_T, grid_y_T) %>%
hyper_tibble()
grid_identifier <- "D0,D1,D2,D2,D3"
mydata <- tidync("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc") %>% activate(grid_identifier) %>%
hyper_tibble()
grid_identifier <- "D1,D0"
mydata <- tidync("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc") %>% activate(grid_identifier) %>%
hyper_tibble()
grid_identifier <- "D3,D0"
mydata <- tidync("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc") %>% activate(grid_identifier) %>%
hyper_tibble()
mydata
grid_identifier <- "D3,D2"
mydata <- tidync("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc") %>% activate(grid_identifier) %>%
hyper_tibble()
ggplot(mydata, aes(x=grid_x_T, y = grid_y_T, fill= depth_t)) + geom_tile()
ggplot(mydata, aes(x=grid_x_T, y = grid_y_T, fill= depth_t)) + geom_tile() + coord_quickmap()
ggplot(mydata, aes(x=grid_x_T, y = grid_y_T, fill= depth_t)) + geom_tile() + coord_quickmap() +
scale_fill_continuous(trans="rev")
mydata <- tidync("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/grid_spec.nc") %>% activate(grid_identifier) %>%
hyper_tibble() %>% rename(lon = grid_x_T, lat = grid_y_T)
ggplot(mydata, aes(x=lon, y = lat, fill= depth_t)) + geom_tile() + coord_quickmap() +
scale_fill_continuous(trans="rev")
ggplot(mydata, aes(x=lon, y = lat, fill= depth_t)) + geom_tile() + coord_quickmap()
mydata2 <- mydata %>%
# first pass at selecting the shelf
filter(depth_t < 200 & depth_t > 15) %>%
# remove shallow areas that aren't on the shelf
filter(lon < 155) %>%
filter(!lon > 149.5 | !lat > -18) %>%
filter(!lon > 151.5 | !lat > -20) %>%
filter(!lon > 153.5 | !lat > -22.5)
# plot to see how it looks
ggplot() +
geom_point(data = mydata2,
aes(x = lon,
y = lat,
colour = h)) +
scale_x_continuous(breaks = seq(145, 155, 1)) +
scale_y_continuous(breaks = seq(-15, -38, -1)) +
geom_sf(data = oz) +
coord_sf(xlim = c(142, 154), ylim = c(-38, -15))
# plot to see how it looks
ggplot() +
geom_point(data = mydata2,
aes(x = lon,
y = lat,
colour = h)) +
scale_x_continuous(breaks = seq(145, 155, 1)) +
scale_y_continuous(breaks = seq(-15, -38, -1)) +
# geom_sf(data = oz) +
coord_sf(xlim = c(142, 154), ylim = c(-38, -15))
# plot to see how it looks
ggplot() +
geom_point(data = mydata2,
aes(x = lon,
y = lat,
colour = depth_t)) +
scale_x_continuous(breaks = seq(145, 155, 1)) +
scale_y_continuous(breaks = seq(-15, -38, -1)) +
# geom_sf(data = oz) +
coord_sf(xlim = c(142, 154), ylim = c(-38, -15))
# set up the ocean_zone column
ocean_zones <- data.frame(max_lat = seq(-15, -37, by = -1), min_lat = seq(-16, -38, by = -1))
ocean_zones <- ocean_zones %>%
#mutate(state = if_else(min_lat < -28, "NSW", "QLD")) %>%
#group_by(state) %>%
mutate(zone_number = row_number()) %>%
ungroup() %>%
mutate(ocean_zone = zone_number) %>%
select(max_lat, min_lat, ocean_zone)
View(ocean_zones)
spanner.locations <- mydata2 %>%
filter(lat > -29.428612 & lat < -23) %>%
#filter(h < 100 & h > 15) %>%
mutate(ocean_zone = if_else(lat < -23 & lat > -24, 2,
if_else(lat < -24 & lat > -25, 3,
if_else(lat < -25 & lat > -26.5, 4,
if_else(lat < -26.5 & lat > -27.5, 5,
if_else(lat < -27.5 & lat > -28.1643, 6,
if_else(lat < -28.1643 & lat > -29.428612, 7, 9999)))))))
# plot to see how it looks
ggplot() +
geom_point(data = spanner.locations,
aes(x = lon,
y = lat,
colour = depth_t)) +
scale_x_continuous(breaks = seq(145, 155, 1)) +
scale_y_continuous(breaks = seq(-15, -38, -1)) +
# geom_sf(data = oz) +
coord_sf(xlim = c(142, 154), ylim = c(-38, -15))
hist(spanner.locations$depth_t)
spanner2 <- spanner.locations %>% select(!starts_with(ds))
spanner2 <- spanner.locations %>% select(!starts_with("ds"))
write_csv(spanner2, "C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/spanner_possible_locations.csv")
### Now program starting depths
levels = c(2.5, 7.5, 12.5, 17.515390396118164, 22.667020797729492, 28.16938018798828, 34.2180061340332, 40.95497512817383,
48.45497512817383, 56.7180061340332, 65.66938018798828, 75.16702270507812, 85.01538848876953, 95.0, 105.0, 115.0,
125.0, 135.0, 145.0, 155.0, 165.0, 175.0, 185.0, 195.0, 205.1898956298828)
spanne2$starting_particle_depth <- 2.5
spannee2$starting_particle_depth <- 2.5
spanner2$starting_particle_depth <- 2.5
for (i in 1:nrow(spanner2)){
for (j in levels){
if spanner2$depth_t[i] > levels[j] {
spanner2$starting_particle_depth[i] <- levels[j]
}
}
}
for (i in 1:nrow(spanner2)){
for (j in levels){
if spanner2$depth_t[i] > levels[j] {
spanner2$starting_particle_depth[i] <- j
}
}
}
for (i in 1:nrow(spanner2)){
for (j in levels){
if spanner2$depth_t[i] > j {
spanner2$starting_particle_depth[i] <- j
}
}
}
for (i in (1:nrow(spanner2))){
for (j in levels){
if spanner2$depth_t[i] > j {
spanner2$starting_particle_depth[i] <- j
}
}
}
for (i in (1:nrow(spanner2))){
for (j in levels){
if (spanner2$depth_t[i] > j) {
spanner2$starting_particle_depth[i] <- j
}
}
}
spanner2
hist(spanner2$starting_particle_depth)
write_csv(spanner2, "C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/AUS/spanner_possible_locations.csv")
summary(spanner2$depth_t)
library(tidync)
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
View(mydata)
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
ggplot(mydata, aes(age, depthA)) + geom_point()
mydata2 <- mydata %>% filter(traj=1)
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age, depthA)) + geom_point()
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age, depthA)) + geom_point()
View(mydata)
library(tidync)
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age, depthA)) + geom_point()
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age, depthA)) + geom_point()
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age, depthA)) + geom_point()
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
View(mydata)
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age, depthA)) + geom_point()
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
View(mydata)
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age, depthA)) + geom_point()
View(mydata)
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age, depthA)) + geom_point()
View(mydata)
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age, depthA)) + geom_point()
View(mydata)
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age, depthA)) + geom_point()
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age, depthA)) + geom_point()
ggplot(mydata2, aes(age/86400, depthA)) + geom_point()
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age/86400, depthA)) + geom_point()
View(mydata)
library(tidync)
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age/86400, depthA)) + geom_point()
View(mydata)
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==1)
ggplot(mydata2, aes(age/86400, depthA)) + geom_point()
ggplot(mydata, aes(age/86400, depthA)) + geom_point()
ggplot(mydata2, aes(age/86400, depthA)) + geom_point()
range(mydata$traj)
mydata2 <- mydata %>% filter(traj==30)
ggplot(mydata2, aes(age/86400, depthA)) + geom_point()
mydata2 <- mydata %>% filter(traj==20)
ggplot(mydata2, aes(age/86400, depthA)) + geom_point()
mydata2 <- mydata %>% filter(traj==10)
ggplot(mydata2, aes(age/86400, depthA)) + geom_point()
ggplot(mydata, aes(age/86400, depthA, col=traj)) + geom_point()
ggplot(mydata, aes(age/86400, depthA, col=traj)) + geom_line()
ggplot(mydata, aes(age/86400, depthA, col=time)) + geom_line()
ggplot(mydata, aes(time/86400, depthA, col=traj)) + geom_line()
ggplot(mydata, aes(time/86400, depthA, col=as.character(traj))) + geom_line()
mydata <- mydata %>% filter(age != 0)
ggplot(mydata, aes(time/86400, depthA, col=as.character(traj))) + geom_line()
ggplot(mydata, aes(age/86400, depthA, col=as.character(traj))) + geom_line()
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata <- mydata %>% filter(age != 0)
mydata2 <- mydata %>% filter(traj==10)
ggplot(mydata, aes(age/86400, depthA, col=as.character(traj))) + geom_line()
mydata <- hyper_tibble("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN/Output/BRAN_Test_output.nc")
mydata2 <- mydata %>% filter(traj==10)
ggplot(mydata, aes(age/86400, depthA, col=as.character(traj))) + geom_line()
library(tidyverse)
mydata <- tidync::hyper_tibble("GitHub/portunid_particle_tracking/BRAN/spanner_1994_forward_9.nc")
head(mydata)
mydata2 <- mydata %>% filter(traj <21)
ggplot(mydata2, aes(x=lon, y = lat, col=as.factor(traj))) + geom_line() + coord_quickmap()
View(mydata2)
mydata2 <- mydata %>% filter(traj ==21)
ggplot(mydata2, aes(x=lon, y = lat, col=as.factor(traj))) + geom_line() + coord_quickmap()
ggplot(mydata2, aes(x=lon, y = lat, col=as.factor(obs))) + geom_line() + coord_quickmap()
ggplot(mydata2, aes(x=lon, y = lat, col=obs)) + geom_line() + coord_quickmap()
ggplot(mydata2, aes(x=lon, y = lat, col=obs)) + geom_line() + coord_quickmap() + geom_point()
mydata2 <- mydata %>% filter(traj ==221)
ggplot(mydata2, aes(x=lon, y = lat, col=obs)) + geom_line() + coord_quickmap() + geom_point()
mydata2 <- mydata %>% filter(traj ==2221)
ggplot(mydata2, aes(x=lon, y = lat, col=obs)) + geom_line() + coord_quickmap() + geom_point()
library(tidyverse)
c(1:2, 1)
84*2*3
252/2
126/3
setwd("C:/Users/htsch/Documents/GitHub/portunid_particle_tracking/BRAN_2020/AUS")
library(tidyverse)
library(tidync)
mydata <- tidync("Ocean_eta_t_2012_02.nc") %>% hyper_tibble()
table(mydata$Time)
mydata <- tidync("Ocean_eta_t_2012_02.nc") %>% hyper_tibble() %>% filter(Time == 12111.5)
ggplot(mydata, aes(x=xt_ocean, y =yt_ocean + col=eta_t, fill = eta_t)) + geom_tile() + coord_quickmap()
ggplot(mydata, aes(x=xt_ocean, y =yt_ocean , col=eta_t, fill = eta_t)) + geom_tile() + coord_quickmap()
ggplot(mydata, aes(x=xt_ocean, y =yt_ocean , col=eta_t, fill = eta_t)) + geom_tile() + coord_quickmap() +
scale_colour_viridis_c() + scale_fill_viridis_c()
ggplot(mydata, aes(x=xt_ocean, y =yt_ocean , col=eta_t, fill = eta_t)) + geom_tile() + coord_quickmap(xlim =c(150,-155), ylim = c(-22,-28)) +
scale_colour_viridis_c() + scale_fill_viridis_c()
ggplot(mydata, aes(x=xt_ocean, y =yt_ocean , col=eta_t, fill = eta_t)) + geom_tile() + coord_quickmap(xlim =c(150,155), ylim = c(-22,-28)) +
scale_colour_viridis_c() + scale_fill_viridis_c()
ggplot(mydata, aes(x=xt_ocean, y =yt_ocean , col=eta_t, fill = eta_t)) + geom_tile() + coord_quickmap(xlim =c(150,155), ylim = c(-15,-30)) +
scale_colour_viridis_c() + scale_fill_viridis_c()
ggplot(mydata, aes(x=xt_ocean, y =yt_ocean , col=eta_t, fill = eta_t)) + geom_tile() + coord_quickmap(xlim =c(150,155), ylim = c(-30,-15)) +
scale_colour_viridis_c() + scale_fill_viridis_c()
ggplot(mydata, aes(x=xt_ocean, y =yt_ocean , col=eta_t, fill = eta_t)) + geom_tile() + coord_quickmap(xlim =c(148,155), ylim = c(-30,-15)) +
scale_colour_viridis_c() + scale_fill_viridis_c()
ggsave("SLA example.png", dpi = 600)
