annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering)
site.map <- gmc.sites|bsc.sites|eac
ggsave("C:/Users/Dan/Documents/PhD/Dispersal/figures/fig_one_site_map.jpeg",
plot = site.map,
device = "jpeg",
width = 29, # a4 dimensions
height = 20,
units = "cm",
dpi = 300)
# summary file to pick out a particle with a nice spread of temp, bath and longitude
particles.sum <- particles %>%
group_by(traj) %>%
summarise(min.temp = min(temp),
max.temp = max(temp),
range.temp = max.temp-min.temp,
min.bathy = min(bathy),
max.bathy = max(bathy),
min.lon = min(lon),
max.lon = max(lon),
min.lat = min(lat),
max.lat = max(lat),
rel_date = min(time)) %>%
filter(min.temp != 0)
particle <- particles %>%
filter(traj == "186913") %>%
mutate(dd = cumsum(temp)) %>%
mutate(gmc = if_else(dd > 535, "settled", "not settled"),
bsc = if_else(dd > 382.5, "settled", "not settled"))
# sst v. days
sst.path <- ggplot() +
geom_sf(data = oz) +
geom_path(data = particle,
aes(x = lon,
y = lat,
colour = temp),
size = 1) +
scale_color_gradient(low = "blue",
high = "red") +
coord_sf(xlim = c(148, 156),
ylim = c(-35, -26)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 12, colour = "black"),
axis.text = element_text(size = 12, colour = "black"), ,
legend.position = "none") +
ylab("Latitude (째)") +
xlab("Longitude (째)") +
labs(colour = "Temperature (째C)") +
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering)
dd.v.days <- ggplot() +
geom_path(data = particle,
aes(x = obs,
y = dd,
colour = temp),
size = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 12, colour = "black"),
axis.text = element_text(size = 12, colour = "black"), ,
legend.text = element_text(size = 12, colour = "black"),
legend.title = element_text(size = 12, colour = "black")) +
ylab("Degree-days") +
xlab("Days") +
scale_color_gradient(low = "blue",
high = "red") +
labs(colour = "Temperature (째C)")
sst.path <- sst.path|dd.v.days
ggsave("C:/Users/Dan/Documents/PhD/Dispersal/figures/supp_fig_sst_path_example.jpeg",
plot = sst.path,
device = "jpeg",
width = 20, # a4 dimensions
height = 15,
units = "cm",
dpi = 300)
# settlement stage
# gmc
gmc.settlement.stage <- settlement.stage %>% filter(species == "Giant Mud Crab")
gmc.stage <- ggplot() +
geom_path(data = gmc.settlement.stage,
aes(x = dd,
y = stage),
group = 1) +
geom_vline(xintercept = gmc.dd.mean,
linetype = "dashed",
size = 1) +
geom_hline(yintercept = "Megalopa",
linetype = "dotted",
size = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 12, colour = "black"),
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text = element_text(size = 12, colour = "black"), ,
legend.text = element_text(size = 12, colour = "black"),
legend.title = element_text(size = 12, colour = "black")) +
ylab("Larval stage") +
xlab("Degree-days") +
scale_x_continuous(breaks = c(seq(0, 400, 200), 535, 600),
limits = c(0, 600)) +
annotate(geom = "text",
420, "Megalopa",
label = "Settlement",
size = 4,
colour = "black",
vjust = -.5) +
annotation_custom(gmc.grob, xmin = 536, xmax = 631, ymin = "Larvae 5", ymax = "Megalopa") # add a picture of a crab
# bsc
bsc.settlement.stage <- settlement.stage %>% filter(species == "Blue Swimmer Crab")
bsc.stage <- ggplot() +
geom_path(data = bsc.settlement.stage,
aes(x = dd,
y = stage),
group = 1) +
geom_vline(xintercept = bsc.dd.mean,
linetype = "dashed",
size = 1) +
geom_hline(yintercept = "Megalopa",
linetype = "dotted",
size = 1) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 12, colour = "black"),
axis.text = element_text(size = 12, colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.text = element_text(size = 12, colour = "black"),
legend.title = element_text(size = 12, colour = "black")) +
ylab("Larval stage") +
xlab("Degree-days") +
scale_x_continuous(breaks = c(seq(0, 300, 100), 382.5, 400),
limits = c(0, 440),
labels = c("0", "100", "200", "300", "382.5", "")) +
annotate(geom = "text",
300, "Megalopa",
label = "Settlement",
size = 4,
colour = "black",
vjust = -.5) +
annotation_custom(bsc.grob, xmin = 384.5, xmax = 460, ymin = "Larvae 4", ymax = "Megalopa")
settlement <- gmc.stage/bsc.stage
ggsave("C:/Users/Dan/Documents/PhD/Dispersal/figures/supp_fig_settlement_stage_example.jpeg",
plot = settlement,
device = "jpeg",
width = 10, # a4 dimensions
height = 15,
units = "cm",
dpi = 300)
# dd and various sst
# gmc
gmc.dd.sst <- ggplot() +
geom_line(data = settlement.sst,
aes(x = days,
y = cold.18),
size = 1,
colour = "blue") +
geom_line(data = settlement.sst,
aes(x = days,
y = med.22),
size = 1,
colour = "purple") +
geom_line(data = settlement.sst,
aes(x = days,
y = warm.26),
size = 1,
colour = "red") +
theme_bw() +
coord_cartesian(xlim = c(0, 30),
ylim = c(0, 600)) +
geom_hline(yintercept = 535,
linetype = "dotted") +
geom_vline(xintercept = 535/18,
linetype = "dashed",
colour = "blue") +
geom_vline(xintercept = 535/22,
linetype = "dashed",
colour = "purple") +
geom_vline(xintercept = 535/26,
linetype = "dashed",
colour = "red") +
annotate(geom = "text", 535/26 - 0.5,
535, label = "Settlement",
size = 4,
colour = "black",
vjust = -0.5,
hjust = 1) +
scale_y_continuous(breaks = c(seq(0, 600, 200), 535)) +
scale_x_continuous(breaks = seq(0, 30, 5)) +
xlab("Days") +
ylab("Degree-days") +
theme(axis.text = element_text(size = 12, colour = "black"),
axis.title.x = element_blank(),
axis.title = element_text(size = 12, colour = "black"),
panel.grid = element_blank()) +
annotation_custom(gmc.grob, xmin = -1, xmax = 5, ymin = 535, ymax = 635)
# bsc
bsc.dd.sst <- ggplot() +
geom_line(data = settlement.sst,
aes(x = days,
y = cold.18),
size = 1,
colour = "blue") +
geom_line(data = settlement.sst,
aes(x = days,
y = med.22),
size = 1,
colour = "purple") +
geom_line(data = settlement.sst,
aes(x = days,
y = warm.26),
size = 1,
colour = "red") +
theme_bw() +
coord_cartesian(xlim = c(0, 25),
ylim = c(0, 440)) +
geom_hline(yintercept = 382.5,
linetype = "dotted") +
geom_vline(xintercept = 382.5/18,
linetype = "dashed",
colour = "blue") +
geom_vline(xintercept = 382.5/22,
linetype = "dashed",
colour = "purple") +
geom_vline(xintercept = 382.5/26,
linetype = "dashed",
colour = "red") +
annotate(geom = "text", 382.5/26 - 0.5,
382.5,
label = "Settlement",
size = 4,
colour = "black",
vjust = -0.5,
hjust = 1) +
scale_y_continuous(breaks = c(seq(0, 300, 100), 382.5, 400),
labels = c("0", "100", "200", "300", "382.5", "")) +
scale_x_continuous(breaks = seq(0, 25, 5)) +
xlab("Days") +
ylab("Degree-days") +
theme(axis.text = element_text(size = 12, colour = "black"),
axis.title = element_text(size = 12, colour = "black"),
panel.grid = element_blank(),
theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))) +
annotation_custom(bsc.grob, xmin = -1, xmax = 5, ymin = 384.5, ymax = 460)
# bsc
bsc.dd.sst <- ggplot() +
geom_line(data = settlement.sst,
aes(x = days,
y = cold.18),
size = 1,
colour = "blue") +
geom_line(data = settlement.sst,
aes(x = days,
y = med.22),
size = 1,
colour = "purple") +
geom_line(data = settlement.sst,
aes(x = days,
y = warm.26),
size = 1,
colour = "red") +
theme_bw() +
coord_cartesian(xlim = c(0, 25),
ylim = c(0, 440)) +
geom_hline(yintercept = 382.5,
linetype = "dotted") +
geom_vline(xintercept = 382.5/18,
linetype = "dashed",
colour = "blue") +
geom_vline(xintercept = 382.5/22,
linetype = "dashed",
colour = "purple") +
geom_vline(xintercept = 382.5/26,
linetype = "dashed",
colour = "red") +
annotate(geom = "text", 382.5/26 - 0.5,
382.5,
label = "Settlement",
size = 4,
colour = "black",
vjust = -0.5,
hjust = 1) +
scale_y_continuous(breaks = c(seq(0, 300, 100), 382.5, 400),
labels = c("0", "100", "200", "300", "382.5", "")) +
scale_x_continuous(breaks = seq(0, 25, 5)) +
xlab("Days") +
ylab("Degree-days") +
theme(axis.text = element_text(size = 12, colour = "black"),
axis.title = element_text(size = 12, colour = "black"),
panel.grid = element_blank()) +
annotation_custom(bsc.grob, xmin = -1, xmax = 5, ymin = 384.5, ymax = 460)
dd.sst <- gmc.dd.sst/bsc.dd.sst
ggsave("C:/Users/Dan/Documents/PhD/Dispersal/figures/supp_fig_dd_sst_example.jpeg",
plot = dd.sst,
device = "jpeg",
width = 10, # a4 dimensions
height = 15,
units = "cm",
dpi = 300)
dd.examples <- settlement|dd.sst
ggsave("C:/Users/Dan/Documents/PhD/Dispersal/figures/supp_fig_dd_example.jpeg",
plot = dd.examples,
device = "jpeg",
width = 20, # a4 dimensions
height = 15,
units = "cm",
dpi = 300)
?
version
R.version
species <- "gmc"
direction <- "forwards"
particles <- hyper_tibble('C:/Users/Dan/Documents/PhD/Dispersal/temp/gmc_2013_3_forwards.nc')
library(tidyverse)
library(lubridate)
library(tidync)
library(ncdf4)
library(zoo)
particles <- hyper_tibble('C:/Users/Dan/Documents/PhD/Dispersal/temp/gmc_2013_3_forwards.nc')
particles.info <- nc_open('C:/Users/Dan/Documents/PhD/Dispersal/temp/gmc_2013_3_forwards.nc')
# extract the time.origin
time.origin <- ymd(str_sub(particles.info$var$time$units, 15, 24))
# convert time to a readable format (i.e. not in seconds since...)
particles <- particles %>%
mutate(date = time.origin + duration(time, units = "seconds"))
particles <- particles %>% # remove columns that are unused
select(-trajectory, -time, -z, -age, -depth_m)
# back fill missing temperature values
is.na(particles$temp) <- particles$temp == 0 # change 0 to NA
particles$temp <- na.locf(particles$temp, na.rm=FALSE) # replace NA with last non-NA observation carried forward
particles$temp <- na.locf(particles$temp, na.rm=FALSE, fromLast = TRUE)
# calculate temperature values
particles <- particles %>%
group_by(traj) %>%
mutate(degree.days = cumsum(temp)) %>%
ungroup() %>%
select(-temp) # remove temp now that it isn't being used
# assign release location (lat & lon) and date
particles <- particles %>%
mutate(rel_lat = if_else(obs == 1, lat, NA_real_)) %>%
mutate(rel_lon = if_else(obs == 1, lon, NA_real_)) %>%
mutate(rel_date = if_else(obs == 1, date, as.POSIXct(NA_Date_))) %>%
mutate(rel_date = as.character(rel_date))
particles$rel_lat <- na.locf(particles$rel_lat, na.rm = F)
particles$rel_lon <- na.locf(particles$rel_lon, na.rm = F)
particles$rel_date <- na.locf(particles$rel_date, na.rm = F)
# remove any particles spawned after the spawning season ended (after April 30th)
particles <- particles %>%
filter(month(rel_date) != "5")
# apply degree-days filter
if (species == "gmc"){
# gmc  from Nurdiani & Zeng (2007), doi:10.1111/j.1365-2109.2007.01810.x
gmc.init <- 75 # intial number of larvae in experiment
gmc.survival <- 0.547 # cumulative survival to megalopa
gmc.n <- round(gmc.init*gmc.survival) # final number of larvae (which I assume mean/se is based on)
temp <- 25 # experimental temp
gmc.mean.days <- 21.4 # mean number of days taken to reach settlement stage
gmc.se.days <- 0.2 # standard error of mean
gmc.sd.days <- gmc.se.days*sqrt(gmc.n) # convert to sd for sgenerating normal dist.
gmc.dd.mean <- gmc.mean.days*temp # mean degree days
gmc.dd.sd <- gmc.sd.days*temp # sd of degree days
gmc.dd.dist <- rnorm(n = 10000, mean = gmc.dd.mean, sd = gmc.dd.sd) # normal distribution
particles <- particles %>%
group_by(traj) %>%
mutate(dd.cutoff = sample(gmc.dd.dist, 1)) %>%
mutate(settlement = if_else(degree.days > dd.cutoff & bathy < 200, "settled", "not settled")) %>%
ungroup()
} else {
# bsc from Bryars & Havenhand (2006), doi:10.1016/j.jembe.2005.09.004
bsc.init <- 60 # intial number of larvae in experiment
bsc.survival <- 0.517 # cumulative survival to megalopa
bsc.n <- round(bsc.init*bsc.survival) # final number of larvae (which I assume mean/se is based on)
#bsc.temp <- 25 # experimental temp
bsc.mean.days <- 15.3 # mean number of days taken to reach settlement stage
bsc.95ci.days <- 0.7 # 95% CI of mean
bsc.se.days <- bsc.95ci.days/1.96
bsc.sd.days <- bsc.se.days*sqrt(bsc.n) # convert to sd for generating normal dist.
bsc.dd.mean <- bsc.mean.days*temp # mean degree days
bsc.dd.sd <- bsc.sd.days*temp # sd of degree days
bsc.dd.dist <- rnorm(n = 10000, mean = bsc.dd.mean, sd = bsc.dd.sd) # normal distribution
particles <- particles %>%
group_by(traj) %>%
mutate(dd.cutoff = sample(bsc.dd.dist, 1)) %>%
mutate(settlement = if_else(degree.days > dd.cutoff & bathy < 200, "settled", "not settled")) %>%
ungroup()
}
# apply mortality
if (direction == "forwards"){
particles$status <- "alive" # label all particles as alive
if (species == "gmc"){
# gmc taken from Nurdiani & Zeng (2007), doi:10.1111/j.1365-2109.2007.01810.x
gmc.cum.mortality <- 1-gmc.survival # 1 minus survival rate after 21.4 days (mean)
m <- 1-exp((1/gmc.mean.days)*log(1-gmc.cum.mortality)) # instantaneous mortality
} else {
bsc.cum.mortality <- 1-bsc.survival
m <- 1-exp((1/bsc.mean.days)*log(1-bsc.cum.mortality)) # instantaneous mortality
}
z <- 1-exp(-m) # daily actual mortality
z<-0.2
min.settle <- round(min(particles$dd.cutoff)/temp) # minimum number of days before a particle could settle (based on degree days)
particles.before <- particles %>% filter(obs < min.settle)
particles.after <- particles %>% filter(obs > min.settle-1)
cohorts <- unique(particles.after$rel_date)
for (j in cohorts) {
cohort <- particles %>% filter(rel_date == j)
for (i in min.settle:max(cohort$obs)) {
alive.particles <- cohort %>% filter(obs == i & status == "alive" & settlement == "not settled")
particle.list <- as.data.frame(unique(alive.particles$traj))
die <- sample_frac(particle.list, size = z)
particles.after$status[particles.after$obs >= i & particles.after$traj %in% die$`unique(alive.particles$traj)`] <- "dead" # label particles as dead
}
}
# join the .before and .after dfs back together
particles <- bind_rows(particles.before, particles.after)
if (species == "gmc"){
particles <- particles %>%
mutate(estuary = case_when(lat < -18.041 & lat > -18.741 ~ "Hinchinbrook Island",
lat < -23.350 & lat > -24.050 ~ "The Narrows",
lat < -25.317 & lat > -26.017 ~ "Maryborough/Hervey Bay",
lat < -26.839 & lat > -27.752 ~ "Moreton Bay",
lat < -27.752 & lat > -28.8275 ~ "Tweed River",
lat < -28.8275 & lat > -29.161 ~ "Richmond River",
lat < -29.161 & lat > -29.632 ~ "Clarence River",
lat < -30.364 & lat > -31.2545 ~ "Macleay River",
lat < -31.2545 & lat > -31.772 ~ "Camden Haven",
lat < -31.772 & lat > -32.046 ~ "Manning River",
lat < -32.046 & lat > -32.456 ~ "Wallis Lake",
lat < -32.456 & lat > -32.818 ~ "Port Stephens",
lat < -32.818 & lat > -33.2475 ~ "Hunter River",
lat < -34.06185 & lat > -34.7457 ~ "Hawkesbury River")) %>%
mutate(state = case_when(lat > -28.16427 ~ "QLD",
lat < -28.16427 ~ "NSW")) #%>%
#mutate(mgmt.zone = case_when())
} else {
particles <- particles %>%
mutate(estuary = case_when(#lat < -18.041 & lat > -18.741 ~ "Hinchinbrook Island",
#lat < -23.350 & lat > -24.050 ~ "The Narrows",
lat < -25.317 & lat > -26.017 ~ "Maryborough/Hervey Bay",
lat < -26.839 & lat > -27.752 ~ "Moreton Bay",
#lat < -27.752 & lat > -28.8275 ~ "Tweed River",
#lat < -28.8275 & lat > -29.161 ~ "Richmond River",
#lat < -29.161 & lat > -29.632 ~ "Clarence River",
#lat < -30.364 & lat > -31.2545 ~ "Macleay River",
#lat < -31.2545 & lat > -31.772 ~ "Camden Haven",
#lat < -31.772 & lat > -32.046 ~ "Manning River",
lat < -32.046 & lat > -32.456 ~ "Wallis Lake",
lat < -32.456 & lat > -32.818 ~ "Port Stephens",
lat < -32.818 & lat > -33.2475 ~ "Hunter River",
lat < -34.06185 & lat > -34.7457 ~ "Hawkesbury River",
lat < -34.06185 & lat > -34.7457 ~ "Lake Illawarra")) %>%
mutate(estuary = if_else(is.na(estuary), "ocean", estuary)) %>%
mutate(state = case_when(lat > -28.16427 ~ "QLD",
lat < -28.16427 ~ "NSW")) #%>%
#mutate(mgmt.zone = case_when()) # blue swimmer crab will need this if we want to relate dispersal to coastal catch
}
#particles.master <- bind_rows(particles.master, particles) # this was taking up too much memory
# creat a df of final points for each particle
if (species == "gmc"){
particles.settled <- particles %>%
group_by(traj) %>%
filter(settlement == "settled" & status == "alive" & estuary != is.na(estuary)) %>% # only select settled, living particles that made it within range of an estuary
filter(obs == min(obs)) %>% # only want the first day
ungroup()
particles.final <- bind_rows(particles.final, particles.settled)
} else {
particles.settled <- particles %>%
group_by(traj) %>%
filter(settlement == "settled" & status == "alive") %>%
filter(obs == min(obs)) %>%
ungroup()
particles.final <- bind_rows(particles.final, particles.settled)
}
} else {
# backwards particles
#particles.master <- bind_rows(particles.master, particles) this was taking up too much memory
# creat a df of final points for each particle
particles.settled <- particles %>%
group_by(traj) %>%
filter(settlement == "settled") %>%
filter(obs == min(obs)) %>%
ungroup()
particles.final <- bind_rows(particles.final, particles.settled)
}
setwd("C:/Users/Dan/Documents/PhD/Dispersal/github/portunid_particle_tracking")
#################
### load data ###
#################
# random output file selected because it's roughly halfway along the coast
# aiming to capture the eac jet and eddy field
particles <- hyper_tibble("Data/gmc_2013_12_forwards.nc")
# forwards release locations
# gmc
gmc.release <- read_csv("Data/gmc_possible_locations.csv")
# bsc
bsc.release <- read_csv("Data/bsc_possible_locations.csv")
# locations of estuaries where GMC/BSC are fished
estuaries <- read_csv("Data/portunid_settlement_locations.csv")
# shapefile of the continental shelf
shelf <- read_sf(dsn = "Data/200m_isobath.shp")
library(sf)
# shapefile of the continental shelf
shelf <- read_sf(dsn = "Data/200m_isobath.shp")
# random day of ozroms velocities/sst
ozroms <- hyper_tibble("Data/20101109.nc") %>%
filter(sst != is.nan(sst)) %>%
filter(depth == max(depth))
# inset pictures of crab silhouettes
gmc.silhouette <- readJPEG("Data/gmc_silhouette.jpg")
library(jpeg)
# inset pictures of crab silhouettes
gmc.silhouette <- readJPEG("Data/gmc_silhouette.jpg")
bsc.silhouette <- readJPEG("Data/bsc_silhouette.jpg")
